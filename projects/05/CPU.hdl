// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//	C instructions:
	//		1 xx a cccccc ddd jjj
	//		a:(1bits for sel AorM)	c..c:(6bits for ALU)  ddd:(3bits for write A/D/M Register)  jjj:(3bits for jmp instructions)
	//	A instructions:
	//		0 15bits(The address of the Register in RAM)
	//		loadA = true
	//		loadD = false
	//		loadPC = false
	//		writeM = false
	//		A/M and ALU's params is not important
	
	// A Register
	//	 inA: 	input of Register A
	// 	 selA:	load bit of Register A
	// if A instructions, inA=instruction[0..15(14)] and selA=1
	// if C instructions, inA=(output of ALU) (because maybe the value of Register A needs to change eg: A=27)
	// 					  selA depends on instruction[15]
	
		Mux16(a=instruction,b=outALU,sel=instruction[15],out=inA);
		Mux(a=true,b=instruction[5],sel=instruction[15],out=selA);
		Register(in=inA,load=selA,out=dataA,out[0..14]=addressM);
	
	//D Register
	
		Mux(a=false,b=instruction[4],sel=instruction[15],out=loadD);
		Register(in=outALU,load=loadD,out=dataD);
	
	// another input of ALU(between dataA and inM)
	// if instruction[12]=0  ->  dataA
	// else	 			 =1		 inM
	
		Mux16(a=dataA,b=inM,sel=instruction[12],out=dataAorM);
	
	// ALU
	
		ALU(x=dataD,y=dataAorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outALU,zr=zr,ng=ng);
	
	// writeM and outM
	
		Mux(a=false,b=instruction[3],sel=instruction[15],out=writeM,out=wm);
		Mux16(a=false,b=outALU,sel=wm,out=outM);
	
	// PC
		
		Mux(a=instruction[0],b=instruction[2],sel=ng,out=tmpload1);
		Mux(a=tmpload1,b=instruction[1],sel=zr,out=tmpload2);
		Mux(a=false,b=tmpload2,sel=instruction[15],out=loadPC);
		Not(in=loadPC,out=inc);
		PC(in=dataA,load=loadPC,inc=inc,reset=reset,out[0..14]=pc);
}